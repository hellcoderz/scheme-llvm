require 'rake'
require 'rake/contrib/sys'
require 'tempfile'
require 'rake/clean'

CLEAN.include("*.bc")
CLEAN.include("*.ll")

llvmgcc="llvm-gcc-4.2"

task :unit_test do
  sh "csi -b parser-lib-tests.scm"
  sh "csi -b scheme-parser-tests.scm"
end

def process_test_suite(&block)
  Sys::for_files("tests/*.scm") { |f|
    puts "------- Testing #{f}\n"
    content = File.read(f)
    
    test = ""
    response = ""
    content.each_line { |l|
      if (l =~ /^;;\s*(.*)/)
        expected = $1
        
        actual = block.call(test.strip)
        
        if (expected != actual)
          print "\nERROR in #{f}\n"
          print "EXPECTED: #{expected}\n"
          print "ACTUAL: #{actual}\n\n"
          fail
        end

        test = ""
      else 
        test += l
      end 
    }
  }
end

task :test_testsuite do
  process_test_suite { |test_data|
    test_data = "(display " + test_data + ")"

    fin = Tempfile.new("scheme-llvm-test-in")
    fout = Tempfile.new("scheme-llvm-test-out")
    fin.write(test_data)
    fin.close
    sh "csi -s #{fin.path} > #{fout.path}"

    actual = fout.read()
    actual
  }
end

task :test_suite => :runtime do
  process_test_suite { |test_data|
    dir = "/tmp/scheme-llvm"
    fin = dir + "/test.scm"
    fll = dir + "/test.ll"
    fbc = dir + "/test.bc"
    fmain = dir + "/main.bc"
    fout = dir + "/test.out"
    
    stream = open(fin, "w")
    stream.write(test_data)
    stream.close

    sh "cat #{fin} | csi -s compile.scm | cpp -P > #{fll}"
    sh "llvm-as -f -o #{fbc} #{fll}"
    sh "llvm-link -f -o #{fmain} runtime.bc #{fbc}"
    sh "lli #{fmain} > #{fout}"

    stream = open(fout)
    actual = stream.read();
    stream.close()

    actual
  }
end

rule ".ll" => ".c" do |t|
  sh "#{llvmgcc} -S -emit-llvm -o #{t.name} #{t.source}"
end

rule ".bc" => ".ll" do |t|
  sh "llvm-as -f -o #{t.name} #{t.source}"
  sh "opt -f -std-compile-opts -o #{t.name} #{t.name}"
end

task :runtime => "runtime.bc"

task :test => :unit_test
task :default => :test
